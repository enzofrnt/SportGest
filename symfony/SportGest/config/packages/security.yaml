security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      entity:
        class: App\Entity\Utilisateur
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      form_login:
        login_path: app_login
        check_path: app_login
        enable_csrf: true
        default_target_path: admin
        username_parameter: email
        password_parameter: password
      logout:
        path: app_logout
        target: app_login
      access_denied_handler: App\Security\AccessDeniedHandler
      access_denied_url: /access-denied

  role_hierarchy:
    ROLE_ADMIN: ROLE_RESPONSABLE
    ROLE_RESPONSABLE: ROLE_COACH
    ROLE_COACH: ROLE_SPORTIF
    ROLE_SPORTIF: ROLE_UTILISATEUR
    ROLE_UTILISATEUR: ROLE_ANONYMOUS

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # Routes publiques
    # - { path: ^/login, roles: PUBLIC_ACCESS }
    # - { path: ^/access-denied, roles: PUBLIC_ACCESS }

    # Routes API
    # - { path: ^/api/login, roles: PUBLIC_ACCESS }
    # - { path: ^/api, roles: ROLE_USER }

    # Routes dashboard avec protection des sous-chemins
    # - { path: ^/admin/responsable, roles: ROLE_RESPONSABLE }
    # - { path: ^/admin/coach, roles: ROLE_COACH }
    # - { path: ^/admin, roles: ROLE_USER }

    # Protection par d√©faut
    # - { path: ^/, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
